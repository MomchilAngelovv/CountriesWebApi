// <auto-generated />
using System;
using Countries.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Countries.Data.Migrations
{
    [DbContext(typeof(CountriesDbContext))]
    partial class CountriesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Countries.Domain.AlternativeSpelling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("AlternativeSpellings");
                });

            modelBuilder.Entity("Countries.Domain.Border", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Borders");
                });

            modelBuilder.Entity("Countries.Domain.CallingCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CallingCodes");
                });

            modelBuilder.Entity("Countries.Domain.Coordinates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.HasKey("Id");

                    b.ToTable("Coordinates");
                });

            modelBuilder.Entity("Countries.Domain.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alpha2Code");

                    b.Property<string>("Aplha3Code");

                    b.Property<double?>("Area");

                    b.Property<string>("Capital");

                    b.Property<string>("Cioc");

                    b.Property<int>("CoordinatesId");

                    b.Property<string>("Demonym");

                    b.Property<string>("FlagUrl");

                    b.Property<double?>("Gini");

                    b.Property<string>("Name");

                    b.Property<string>("NativeName");

                    b.Property<string>("NumericCode");

                    b.Property<double>("Population");

                    b.Property<string>("Region");

                    b.Property<string>("SubRegion");

                    b.Property<int>("TranslationsId");

                    b.HasKey("Id");

                    b.HasIndex("CoordinatesId");

                    b.HasIndex("TranslationsId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Countries.Domain.CountryBorder", b =>
                {
                    b.Property<int>("CountryId");

                    b.Property<int>("BorderId");

                    b.HasKey("CountryId", "BorderId");

                    b.HasIndex("BorderId");

                    b.ToTable("CountryBorder");
                });

            modelBuilder.Entity("Countries.Domain.CountryCurrency", b =>
                {
                    b.Property<int>("CountryId");

                    b.Property<int>("CurrencyId");

                    b.HasKey("CountryId", "CurrencyId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("CountryCurrency");
                });

            modelBuilder.Entity("Countries.Domain.CountryLanguage", b =>
                {
                    b.Property<int>("CountryId");

                    b.Property<int>("LanguageId");

                    b.HasKey("CountryId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CountryLanguage");
                });

            modelBuilder.Entity("Countries.Domain.CountryRegionalBlock", b =>
                {
                    b.Property<int>("CountryId");

                    b.Property<int>("RegionalBlockId");

                    b.HasKey("CountryId", "RegionalBlockId");

                    b.HasIndex("RegionalBlockId");

                    b.ToTable("CountryRegionalBlock");
                });

            modelBuilder.Entity("Countries.Domain.CountryTimeZone", b =>
                {
                    b.Property<int>("CountryId");

                    b.Property<int>("TimeZoneId");

                    b.HasKey("CountryId", "TimeZoneId");

                    b.HasIndex("TimeZoneId");

                    b.ToTable("CountryTimeZone");
                });

            modelBuilder.Entity("Countries.Domain.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.Property<string>("Symbol");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Countries.Domain.InternetDomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("InternetDomains");
                });

            modelBuilder.Entity("Countries.Domain.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Iso639_1");

                    b.Property<string>("Iso639_2");

                    b.Property<string>("Name");

                    b.Property<string>("NativeName");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Countries.Domain.RegionalBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Acronym");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("RegionalBlocks");
                });

            modelBuilder.Entity("Countries.Domain.TimeZone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("TimeZones");
                });

            modelBuilder.Entity("Countries.Domain.Translations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Br");

                    b.Property<string>("De");

                    b.Property<string>("Es");

                    b.Property<string>("Fa");

                    b.Property<string>("Fr");

                    b.Property<string>("Hr");

                    b.Property<string>("It");

                    b.Property<string>("Ja");

                    b.Property<string>("Nl");

                    b.Property<string>("Pt");

                    b.HasKey("Id");

                    b.ToTable("Translations");
                });

            modelBuilder.Entity("Countries.Domain.AlternativeSpelling", b =>
                {
                    b.HasOne("Countries.Domain.Country", "Country")
                        .WithMany("AlternativeSpellings")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Countries.Domain.CallingCode", b =>
                {
                    b.HasOne("Countries.Domain.Country", "Country")
                        .WithMany("CallingCodes")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Countries.Domain.Country", b =>
                {
                    b.HasOne("Countries.Domain.Coordinates", "Coordinates")
                        .WithMany()
                        .HasForeignKey("CoordinatesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Countries.Domain.Translations", "Translations")
                        .WithMany()
                        .HasForeignKey("TranslationsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Countries.Domain.CountryBorder", b =>
                {
                    b.HasOne("Countries.Domain.Border", "Border")
                        .WithMany("Countries")
                        .HasForeignKey("BorderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Countries.Domain.Country", "Country")
                        .WithMany("Borders")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Countries.Domain.CountryCurrency", b =>
                {
                    b.HasOne("Countries.Domain.Country", "Country")
                        .WithMany("Currencies")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Countries.Domain.Currency", "Currency")
                        .WithMany("Countries")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Countries.Domain.CountryLanguage", b =>
                {
                    b.HasOne("Countries.Domain.Country", "Country")
                        .WithMany("Languages")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Countries.Domain.Language", "Language")
                        .WithMany("Countries")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Countries.Domain.CountryRegionalBlock", b =>
                {
                    b.HasOne("Countries.Domain.Country", "Country")
                        .WithMany("Blocks")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Countries.Domain.RegionalBlock", "RegionalBlock")
                        .WithMany("Countries")
                        .HasForeignKey("RegionalBlockId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Countries.Domain.CountryTimeZone", b =>
                {
                    b.HasOne("Countries.Domain.Country", "Country")
                        .WithMany("TimeZones")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Countries.Domain.TimeZone", "TimeZone")
                        .WithMany("Countries")
                        .HasForeignKey("TimeZoneId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Countries.Domain.InternetDomain", b =>
                {
                    b.HasOne("Countries.Domain.Country", "Country")
                        .WithMany("Domains")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
